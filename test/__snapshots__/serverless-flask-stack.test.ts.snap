// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SnapshotTest 1`] = `
Object {
  "Outputs": Object {
    "CDNDomain": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Fn::GetAtt": Array [
                "CDN2330F4C0",
                "DomainName",
              ],
            },
          ],
        ],
      },
    },
    "FlaskLambdaRestApiEndpoint2BF2C749": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "FlaskLambdaRestApi4883B802",
            },
            ".execute-api.",
            Object {
              "Ref": "AWS::Region",
            },
            ".",
            Object {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            Object {
              "Ref": "FlaskLambdaRestApiDeploymentStageprodAA802E6B",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "CDN2330F4C0": Object {
      "Properties": Object {
        "DistributionConfig": Object {
          "DefaultCacheBehavior": Object {
            "AllowedMethods": Array [
              "GET",
              "HEAD",
              "OPTIONS",
              "PUT",
              "PATCH",
              "POST",
              "DELETE",
            ],
            "CachePolicyId": Object {
              "Ref": "DefaultCachePolicyDDFA5BDC",
            },
            "CachedMethods": Array [
              "GET",
              "HEAD",
              "OPTIONS",
            ],
            "Compress": true,
            "FunctionAssociations": Array [
              Object {
                "EventType": "viewer-request",
                "FunctionARN": Object {
                  "Fn::GetAtt": Array [
                    "RewriteCdnHost7906DE10",
                    "FunctionARN",
                  ],
                },
              },
            ],
            "SmoothStreaming": false,
            "TargetOriginId": "MyTestStackCDNOrigin1581165C2",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Origins": Array [
            Object {
              "ConnectionAttempts": 3,
              "ConnectionTimeout": 10,
              "CustomOriginConfig": Object {
                "HTTPSPort": 443,
                "OriginProtocolPolicy": "https-only",
                "OriginSSLProtocols": Array [
                  "TLSv1.2",
                ],
              },
              "DomainName": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Ref": "FlaskLambdaRestApi4883B802",
                    },
                    ".execute-api.",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ".amazonaws.com",
                  ],
                ],
              },
              "Id": "MyTestStackCDNOrigin1581165C2",
              "OriginPath": "/prod",
            },
          ],
          "PriceClass": "PriceClass_200",
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "DefaultCachePolicyDDFA5BDC": Object {
      "Properties": Object {
        "CachePolicyConfig": Object {
          "DefaultTTL": 300,
          "MaxTTL": 3600,
          "MinTTL": 0,
          "Name": "CachePolicy-prod",
          "ParametersInCacheKeyAndForwardedToOrigin": Object {
            "CookiesConfig": Object {
              "CookieBehavior": "whitelist",
              "Cookies": Array [
                "session",
              ],
            },
            "EnableAcceptEncodingBrotli": true,
            "EnableAcceptEncodingGzip": true,
            "HeadersConfig": Object {
              "HeaderBehavior": "whitelist",
              "Headers": Array [
                "x-forwarded-host",
              ],
            },
            "QueryStringsConfig": Object {
              "QueryStringBehavior": "all",
            },
          },
        },
      },
      "Type": "AWS::CloudFront::CachePolicy",
    },
    "FlaskLambdaRestApi4883B802": Object {
      "Properties": Object {
        "BinaryMediaTypes": Array [
          "*/*",
        ],
        "Name": "serverless-flask-api-prod",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "FlaskLambdaRestApiANYApiPermissionMyTestStackFlaskLambdaRestApi58E05B2CANYA0684099": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "ServerlessFlaskLambda90920255",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "FlaskLambdaRestApi4883B802",
              },
              "/",
              Object {
                "Ref": "FlaskLambdaRestApiDeploymentStageprodAA802E6B",
              },
              "/*/",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "FlaskLambdaRestApiANYApiPermissionTestMyTestStackFlaskLambdaRestApi58E05B2CANY448E67D4": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "ServerlessFlaskLambda90920255",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "FlaskLambdaRestApi4883B802",
              },
              "/test-invoke-stage/*/",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "FlaskLambdaRestApiANYC4308976": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "ANY",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "ServerlessFlaskLambda90920255",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Fn::GetAtt": Array [
            "FlaskLambdaRestApi4883B802",
            "RootResourceId",
          ],
        },
        "RestApiId": Object {
          "Ref": "FlaskLambdaRestApi4883B802",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "FlaskLambdaRestApiAccount566D8BF7": Object {
      "DeletionPolicy": "Retain",
      "DependsOn": Array [
        "FlaskLambdaRestApi4883B802",
      ],
      "Properties": Object {
        "CloudWatchRoleArn": Object {
          "Fn::GetAtt": Array [
            "FlaskLambdaRestApiCloudWatchRole259FF17C",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "FlaskLambdaRestApiCloudWatchRole259FF17C": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "FlaskLambdaRestApiDeployment354FB1C3336497a99a910cbb43294351d7f04d34": Object {
      "DependsOn": Array [
        "FlaskLambdaRestApiproxyANY9442EDC4",
        "FlaskLambdaRestApiproxyF0AA8E0C",
        "FlaskLambdaRestApiANYC4308976",
      ],
      "Properties": Object {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": Object {
          "Ref": "FlaskLambdaRestApi4883B802",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "FlaskLambdaRestApiDeploymentStageprodAA802E6B": Object {
      "DependsOn": Array [
        "FlaskLambdaRestApiAccount566D8BF7",
      ],
      "Properties": Object {
        "DeploymentId": Object {
          "Ref": "FlaskLambdaRestApiDeployment354FB1C3336497a99a910cbb43294351d7f04d34",
        },
        "MethodSettings": Array [
          Object {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "ResourcePath": "/*",
            "ThrottlingBurstLimit": 1000,
            "ThrottlingRateLimit": 100,
          },
        ],
        "RestApiId": Object {
          "Ref": "FlaskLambdaRestApi4883B802",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "FlaskLambdaRestApiproxyANY9442EDC4": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "ANY",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "ServerlessFlaskLambda90920255",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "FlaskLambdaRestApiproxyF0AA8E0C",
        },
        "RestApiId": Object {
          "Ref": "FlaskLambdaRestApi4883B802",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "FlaskLambdaRestApiproxyANYApiPermissionMyTestStackFlaskLambdaRestApi58E05B2CANYproxy7E790FF1": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "ServerlessFlaskLambda90920255",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "FlaskLambdaRestApi4883B802",
              },
              "/",
              Object {
                "Ref": "FlaskLambdaRestApiDeploymentStageprodAA802E6B",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "FlaskLambdaRestApiproxyANYApiPermissionTestMyTestStackFlaskLambdaRestApi58E05B2CANYproxy3ECD2019": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "ServerlessFlaskLambda90920255",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "FlaskLambdaRestApi4883B802",
              },
              "/test-invoke-stage/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "FlaskLambdaRestApiproxyF0AA8E0C": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "FlaskLambdaRestApi4883B802",
            "RootResourceId",
          ],
        },
        "PathPart": "{proxy+}",
        "RestApiId": Object {
          "Ref": "FlaskLambdaRestApi4883B802",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "LambdaRole3A44B857": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "ec2:DescribeTags",
                    "cloudwatch:GetMetricStatistics",
                    "cloudwatch:ListMetrics",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:DescribeLogStreams",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                  "Sid": "0",
                },
                Object {
                  "Action": "lambda:InvokeFunction",
                  "Effect": "Allow",
                  "Resource": "*",
                  "Sid": "1",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "lambda-executor",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaRoleDefaultPolicy75625A82": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "S3StorageA4C3DCD4",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "S3StorageA4C3DCD4",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LambdaRoleDefaultPolicy75625A82",
        "Roles": Array [
          Object {
            "Ref": "LambdaRole3A44B857",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A": Object {
      "DependsOn": Array [
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e45ee2082d227db1b6f0292696ce5ce2b061c105d15efb341925ca040d1feb68.zip",
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:PutRetentionPolicy",
                "logs:DeleteRetentionPolicy",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "Roles": Array [
          Object {
            "Ref": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "RewriteCdnHost7906DE10": Object {
      "Properties": Object {
        "AutoPublish": true,
        "FunctionCode": "
              function handler(event) {
                var req = event.request;
                if (req.headers['host']) {
                  req.headers['x-forwarded-host'] = {
                    value: req.headers['host'].value
                  };
                }
                return req;
              }
              ",
        "FunctionConfig": Object {
          "Comment": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Ref": "AWS::AccountId",
                },
                "MyTestStackFixCdnHostFunctionprod",
              ],
            ],
          },
          "Runtime": "cloudfront-js-1.0",
        },
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::AccountId",
              },
              "MyTestStackFixCdnHostFunctionprod",
            ],
          ],
        },
      },
      "Type": "AWS::CloudFront::Function",
    },
    "S3StorageA4C3DCD4": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "ServerlessFlaskLambda90920255": Object {
      "DependsOn": Array [
        "LambdaRoleDefaultPolicy75625A82",
        "LambdaRole3A44B857",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "b11c7ddab3867a120ae0e0d0626d8c3750e00f8bc19bf975741a10b74baab662.zip",
        },
        "Environment": Object {
          "Variables": Object {
            "JSON_CONFIG_OVERRIDE": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "{\\"SESSION_COOKIE_SECURE\\":true,\\"DEBUG\\":false,\\"TEMPLATES_AUTO_RELOAD\\":false,\\"SEND_FILE_MAX_AGE_DEFAULT\\":300,\\"PERMANENT_SESSION_LIFETIME\\":86400,\\"ROOT_LOG_LEVEL\\":\\"INFO\\",\\"S3_BUCKET\\":\\"",
                  Object {
                    "Ref": "S3StorageA4C3DCD4",
                  },
                  "\\"}",
                ],
              ],
            },
          },
        },
        "FunctionName": "serverless-flask-lambda-prod",
        "Handler": "serverless_flask.lambda.lambda_handler",
        "MemorySize": 256,
        "Role": Object {
          "Fn::GetAtt": Array [
            "LambdaRole3A44B857",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ServerlessFlaskLambdaLogRetention92047C19": Object {
      "Properties": Object {
        "LogGroupName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/aws/lambda/",
              Object {
                "Ref": "ServerlessFlaskLambda90920255",
              },
            ],
          ],
        },
        "RetentionInDays": 180,
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn",
          ],
        },
      },
      "Type": "Custom::LogRetention",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
